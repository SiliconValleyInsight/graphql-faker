{"version":3,"file":"proxy.js","sourceRoot":"","sources":["../src/proxy.ts"],"names":[],"mappings":"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","sourcesContent":["import fetch from 'node-fetch';\nimport {Headers} from 'node-fetch';\nimport {\n  set as pathSet,\n  get as pathGet,\n} from 'lodash';\n\nimport {\n  Kind,\n  parse,\n  print,\n  visit,\n  TypeInfo,\n  formatError,\n  printSchema,\n  extendSchema,\n  isAbstractType,\n  visitWithTypeInfo,\n  buildClientSchema,\n  introspectionQuery,\n  separateOperations,\n  DocumentNode,\n} from 'graphql';\n\nimport { fakeSchema } from './fake_schema';\n\ntype RequestInfo = {\n  document: DocumentNode,\n  variables?: {[name: string]: any};\n  operationName?: string;\n  result?: any;\n};\n\nexport function proxyMiddleware(url, headers) {\n  const remoteServer = requestFactory(url, headers);\n\n  return getIntrospection().then(introspection => {\n    const introspectionSchema = buildClientSchema(introspection.data);\n    const introspectionIDL = printSchema(introspectionSchema);\n\n    return [introspectionIDL, (serverSchema, extensionIDL, forwardHeaders) => {\n      const extensionAST = parse(extensionIDL);\n      const extensionFields = getExtensionFields(extensionAST);\n      const schema = extendSchema(serverSchema, extensionAST);\n      fakeSchema(schema);\n\n      //TODO: proxy extensions\n      return {\n        schema,\n        formatError: error => ({\n          ...formatError(error),\n          ...pathGet(error, 'originalError.extraProps', {}),\n        }),\n        rootValue: (info: RequestInfo) => {\n          const operationName = info.operationName;\n          const variables = info.variables;\n          const query = stripQuery(\n            schema, info.document, operationName, extensionFields\n          );\n\n          return remoteServer(query, variables, operationName, forwardHeaders)\n            .then(buildRootValue);\n        },\n      };\n    }];\n  });\n\n  function getIntrospection() {\n    return remoteServer(introspectionQuery)\n      .then(introspection => {\n        if (introspection.errors)\n          throw Error(JSON.stringify(introspection.errors, null, 2));\n        return introspection;\n      })\n      .catch(error => {\n        throw Error(`Can't get introspection from ${url}:\\n${error.message}`);\n      })\n  }\n}\n\nfunction buildRootValue(response) {\n  const rootValue = response.data;\n  const globalErrors = [];\n\n  for (const error of (response.errors || [])) {\n    if (!error.path)\n      globalErrors.push(error);\n\n    const {message, locations: _1, path: _2, ...extraProps} = error;\n    const errorObj = new Error(error.message);\n    (errorObj as any).extraProps = extraProps;\n\n    // Recreate root value up to a place where original error was thrown\n    // and place error as field value.\n    pathSet(rootValue, error.path, errorObj);\n  }\n\n  // TODO proxy global errors\n  if (globalErrors.length !== 0)\n    console.error('Global Errors:\\n', globalErrors);\n\n  return rootValue;\n}\n\nfunction getExtensionFields(extensionAST) {\n  const extensionFields = {};\n  (extensionAST.definitions || []).forEach(def => {\n    if (def.kind !== Kind.TYPE_EXTENSION_DEFINITION)\n      return;\n    const typeName = def.definition.name.value;\n    // FIXME: handle multiple extends of the same type\n    extensionFields[typeName] = def.definition.fields.map(field => field.name.value);\n  });\n  return extensionFields;\n}\n\nfunction injectTypename(node) {\n  return {\n    ...node,\n    selections: [\n      ...node.selections,\n      {\n        kind: Kind.FIELD,\n        name: {\n          kind: Kind.NAME,\n          value: '__typename',\n        },\n      },\n    ],\n  };\n}\n\nfunction stripQuery(schema, queryAST, operationName, extensionFields) {\n  const typeInfo = new TypeInfo(schema);\n\n  const changedAST = visit(queryAST, visitWithTypeInfo(typeInfo, {\n    [Kind.FIELD]: () => {\n      const typeName = typeInfo.getParentType().name;\n      const fieldName = typeInfo.getFieldDef().name;\n\n      if (fieldName.startsWith('__'))\n        return null;\n      if ((extensionFields[typeName] || []).includes(fieldName))\n        return null;\n    },\n    [Kind.SELECTION_SET]: {\n      leave(node) {\n        const type = typeInfo.getParentType()\n        if (isAbstractType(type) || node.selections.length === 0)\n          return injectTypename(node);\n      }\n    },\n  }));\n\n  let operation = extractOperation(changedAST, operationName);\n  operation = removeUnusedVariables(operation);\n  return print(operation);\n}\n\nfunction removeUnusedVariables(queryAST) {\n  const seenVariables = {}\n  visit(queryAST, {\n    [Kind.VARIABLE_DEFINITION]: () => false,\n    [Kind.VARIABLE]: (node) => {\n      seenVariables[node.name.value] = true;\n    },\n  });\n\n  // Need to second visit to account for variables used in fragments\n  // so we make modification only when we seen all variables.\n  return visit(queryAST, {\n    [Kind.OPERATION_DEFINITION]: {\n      leave(node) {\n        const variableDefinitions = (node.variableDefinitions || []).filter(\n          def => seenVariables[def.variable.name.value]\n        );\n        return { ...node, variableDefinitions };\n      },\n    },\n  });\n}\n\nfunction extractOperation(queryAST, operationName) {\n  const operations = separateOperations(queryAST);\n  if (operationName)\n    return operations[operationName];\n  return Object.values(operations)[0];\n}\n\nfunction requestFactory(url, headersObj) {\n  return (query, variables?, operationName?, forwardHeaders?) => {\n    return fetch(url, {\n      method: 'POST',\n      headers: new Headers({\n        \"content-type\": 'application/json',\n        ...headersObj,\n        ...forwardHeaders,\n      }),\n      body: JSON.stringify({\n        operationName,\n        query,\n        variables,\n      })\n    }).then(responce => {\n      if (responce.ok)\n        return responce.json();\n      return responce.text().then(body => {\n        throw Error(`${responce.status} ${responce.statusText}\\n${body}`);\n      });\n    });\n  }\n}\n"]}