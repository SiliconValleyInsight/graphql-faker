{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;AAEA,wBAAsB;AAEtB,qCAAmE;AAEnE,yBAAyB;AACzB,6BAA6B;AAC7B,+CAA+C;AAC/C,6BAA6B;AAC7B,mCAA8B;AAC9B,mCAA0C;AAE1C,MAAM,iBAAiB,GAAG,OAAO,CAC/B,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,yBAAyB,CAAC,CAChD,CAAC;AAEF,iBAAiB,QAAQ;IACvB,OAAO,IAAI,gBAAM,CAAC,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,OAAO,CAAC,EAAE,QAAQ,CAAC,CAAC;AAClE,CAAC;AAED,iBAAiB,QAAQ;IACvB,OAAO,eAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;AAClC,CAAC;AAED,2BAA2B,GAAG;IAC5B,IAAI,GAAG,GAAG,mBAAS,CAAC,CAAC,eAAK,CAAC,GAAG,CAAC,EAAE,iBAAiB,CAAC,CAAC,CAAC;IACrD,OAAO,wBAAc,CAAC,GAAG,CAAC,CAAC;AAC7B,CAAC;AAEY,QAAA,UAAU,GAAG,CAAC,WAAW,EAAE,GAAG,EAAE,EAAE,CAC7C,WAAW,CAAC,GAAG,CAAC,EAAE;IAChB,MAAM,OAAO,GAAG,IAAI,gBAAM,CAAC,WAAW,EAAE,iCAAiC,CAAC,CAAC;IAE3E,OAAO,uBAAe,CAAC,GAAG,EAAE,EAAE,CAAC;SAC5B,IAAI,CAAC,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,EAAE,EAAE;QACxB,SAAS,GAAG,IAAI,gBAAM,CAAC,SAAS,EAAE,sBAAsB,GAAG,GAAG,CAAC,CAAC;QAEhE,IAAI,OAAO,EAAE;YACX,MAAM,MAAM,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC;YAC5C,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CACjC,gBAAgB,EAChB,MAAM,CAAC,YAAY,EAAE,CAAC,IAAI,CAC3B,CAAC;SACH;QAED,MAAM,MAAM,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC;QAC5C,MAAM,cAAc,GAAG,aAAI,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC7C,yBACK,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,cAAc,CAAC,IACtC,QAAQ,EAAE,IAAI,IACd;IACJ,CAAC,CAAC;SACD,KAAK,CAAC,KAAK,CAAC,EAAE;QACb,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACrB,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["#!/usr/bin/env node\n\nimport \"core-js/shim\";\n\nimport { Source, parse, concatAST, buildASTSchema } from \"graphql\";\n\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as graphqlHTTP from \"express-graphql\";\n// import chalk from \"chalk\";\nimport { pick } from \"lodash\";\nimport { proxyMiddleware } from \"./proxy\";\n\nconst fakeDefinitionAST = readAST(\n  path.join(__dirname, \"fake_definition.graphql\")\n);\n\nfunction readIDL(filepath) {\n  return new Source(fs.readFileSync(filepath, \"utf-8\"), filepath);\n}\n\nfunction readAST(filepath) {\n  return parse(readIDL(filepath));\n}\n\nfunction buildServerSchema(idl) {\n  var ast = concatAST([parse(idl), fakeDefinitionAST]);\n  return buildASTSchema(ast);\n}\n\nexport const fakerProxy = (fakedSchema, url) =>\n  graphqlHTTP(req => {\n    const fakeIDL = new Source(fakedSchema, `Introspection from faked schema`);\n\n    return proxyMiddleware(url, [])\n      .then(([schemaIDL, cb]) => {\n        schemaIDL = new Source(schemaIDL, `Inrospection from \"${url}\"`);\n\n        if (fakeIDL) {\n          const schema = buildServerSchema(schemaIDL);\n          fakeIDL.body = fakeIDL.body.replace(\n            \"<RootTypeName>\",\n            schema.getQueryType().name\n          );\n        }\n\n        const schema = buildServerSchema(schemaIDL);\n        const forwardHeaders = pick(req.headers, []);\n        return {\n          ...cb(schema, fakeIDL, forwardHeaders),\n          graphiql: true\n        };\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  });\n"]}