{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;AAEA,wBAAsB;AAEtB,qCAAmE;AAEnE,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AACnC,+CAA+C;AAC/C,mCAA8B;AAC9B,mCAA0C;AAC1C,uEAAwD;AAExD,MAAM,GAAG,GAAG,OAAO,EAAE,CAAC;AAEtB,2BAA2B,GAAG;IAC5B,MAAM,OAAO,GAAG,IAAI,gBAAM,CAAC,iCAAe,EAAE,qBAAqB,CAAC,CAAC;IACnE,MAAM,OAAO,GAAG,eAAK,CAAC,OAAO,CAAC,CAAC;IAC/B,IAAI,GAAG,GAAG,mBAAS,CAAC,CAAC,eAAK,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;IAC3C,OAAO,wBAAc,CAAC,GAAG,CAAC,CAAC;AAC7B,CAAC;AAED,MAAM,UAAU,GAAG,CAAC,WAAW,EAAE,GAAG,EAAE,EAAE,CACtC,WAAW,CAAC,GAAG,CAAC,EAAE;IAChB,MAAM,OAAO,GAAG,IAAI,gBAAM,CAAC,WAAW,EAAE,iCAAiC,CAAC,CAAC;IAE3E,OAAO,uBAAe,CAAC,GAAG,EAAE,EAAE,CAAC;SAC5B,IAAI,CAAC,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,EAAE,EAAE;QACxB,SAAS,GAAG,IAAI,gBAAM,CAAC,SAAS,EAAE,sBAAsB,GAAG,GAAG,CAAC,CAAC;QAEhE,IAAI,OAAO,EAAE;YACX,MAAM,MAAM,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC;YAC5C,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CACjC,gBAAgB,EAChB,MAAM,CAAC,YAAY,EAAE,CAAC,IAAI,CAC3B,CAAC;SACH;QAED,MAAM,MAAM,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC;QAC5C,MAAM,cAAc,GAAG,aAAI,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC7C,yBACK,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,cAAc,CAAC,IACtC,QAAQ,EAAE,IAAI,IACd;IACJ,CAAC,CAAC;SACD,KAAK,CAAC,KAAK,CAAC,EAAE;QACb,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACrB,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AAEL,MAAM,GAAG,GACP,wEAAwE,CAAC;AAE3E,MAAM,WAAW,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6EnB,CAAC;AAEF,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE,UAAU,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAC;AAElD,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC","sourcesContent":["#!/usr/bin/env node\n\nimport \"core-js/shim\";\n\nimport { Source, parse, concatAST, buildASTSchema } from \"graphql\";\n\nconst express = require(\"express\");\nimport * as graphqlHTTP from \"express-graphql\";\nimport { pick } from \"lodash\";\nimport { proxyMiddleware } from \"./proxy\";\nimport fake_definition from \"./fake_definition_graphql\";\n\nconst app = express();\n\nfunction buildServerSchema(idl) {\n  const fakeIDL = new Source(fake_definition, \"Fake definition AST\");\n  const fakeAST = parse(fakeIDL);\n  var ast = concatAST([parse(idl), fakeAST]);\n  return buildASTSchema(ast);\n}\n\nconst fakerProxy = (fakedSchema, url) =>\n  graphqlHTTP(req => {\n    const fakeIDL = new Source(fakedSchema, `Introspection from faked schema`);\n\n    return proxyMiddleware(url, [])\n      .then(([schemaIDL, cb]) => {\n        schemaIDL = new Source(schemaIDL, `Inrospection from \"${url}\"`);\n\n        if (fakeIDL) {\n          const schema = buildServerSchema(schemaIDL);\n          fakeIDL.body = fakeIDL.body.replace(\n            \"<RootTypeName>\",\n            schema.getQueryType().name\n          );\n        }\n\n        const schema = buildServerSchema(schemaIDL);\n        const forwardHeaders = pick(req.headers, []);\n        return {\n          ...cb(schema, fakeIDL, forwardHeaders),\n          graphiql: true\n        };\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  });\n\nconst url =\n  \"https://59y35kj8hj.execute-api.us-east-1.amazonaws.com/develop/graphql\";\n\nconst fakedSchema = `\n  extend type <RootTypeName> {\n    assets: [Asset]\n    symbols: [Symbol]\n    exchanges: [Exchange]\n    exchange(id: ID!): Exchange\n    trades(symbol: ID!): [Trade]\n    ticker(symbol: ID!): Ticker\n    orderBook: OrderBook\n    candlestick(from: String, to: String): Candlestick\n  }\n\n  type Asset {\n    name: String @examples(values: [\"Bitcoin\", \"EOS\", \"Ethereum\"])\n    symbol: String @examples(values: [\"BTC\", \"EOS\", \"ETH\"])\n  }\n\n  type Symbol {\n    base: Asset!\n    quote: Asset!\n  }\n\n  type Exchange {\n      name: String @examples(values: [\"Huobi\", \"Bitfinex\", \"Binance\", \"Poloniex\", \"Bittrex\"])\n      url: String @fake(type: url)\n  }\n\n  enum TradeType {\n      BUY\n      SELL\n  }\n\n  type Trade {\n    timestamp: String! @fake(type: recentDate, options: {dateFormat: \"YYYY-MM-DD\"})\n    symbol: Symbol!\n    price: Float @fake(type: money, options: {minMoney: 10, maxMoney: 1000, decimalPlaces: 2})\n    amount: Int\n    exchange: Exchange!\n    tradeType: TradeType\n  }\n\n  type Ticker {\n    symbol: Symbol!\n    timestamp: String! @fake(type: recentDate, options: {dateFormat: \"YYYY-MM-DD\"})\n    mid: Float!\n    bid: Float!\n    ask: Float!\n    lastPrice: Float @fake(type: money, options: {minMoney: 10, maxMoney: 1000, decimalPlaces: 2})\n    highestPrice: Float @fake(type: money, options: {minMoney: 10, maxMoney: 1000, decimalPlaces: 2})\n    lowestPrice: Float @fake(type: money, options: {minMoney: 10, maxMoney: 1000, decimalPlaces: 2})\n    volume: Float\n  }\n\n  type Order {\n      price: Float!\n      amount: Float!\n  }\n\n  type OrderBook {\n      symbol: Symbol\n      bids: [Order]\n      asks: [Order]\n      timestamp: String! @fake(type: recentDate, options: {dateFormat: \"YYYY-MM-DD\"})\n  }\n\n  type DataPoint {\n    timestamp: String! @fake(type: recentDate, options: {dateFormat: \"YYYY-MM-DD\"})\n    open: Float!\n    close: Float!\n    high: Float!\n    low: Float!\n    volume: Float!\n  }\n\n  type Candlestick {\n    dataPoints: [DataPoint!]!\n  }\n`;\n\napp.use(\"/graphql\", fakerProxy(fakedSchema, url));\n\napp.listen(3000);\n"]}